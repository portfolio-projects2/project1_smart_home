@using Microsoft.EntityFrameworkCore

@{
    ViewData["Title"] = "Index";
    string token = ViewBag.token;
    ProjectDbContext context = ViewBag.context;
    List<Device> devices = context.Device.Include(a => a.room).ToList();
    List<Sensor> sensors = context.Sensor.Include(a=>a.room). ToList();
    List<Room> rooms = context.Room.ToList();
    List<Automation> automations = context.Automation.ToList();
    List<EnergySourceDevice> energySourceDevices = context.EnergySourceDevice.ToList();
    String welcomeText = "";
    TimeSpan startMorning = new TimeSpan(00, 0, 0); //0 o'clock
    TimeSpan endMorning = new TimeSpan(12, 0, 0); //12 o'clock
        TimeSpan endAfternoon = new TimeSpan(18, 0, 0); 
       TimeSpan endEvning = new TimeSpan(23, 0, 0); 
       TimeSpan now = DateTime.Now.TimeOfDay;
       @if ((now > startMorning) && (now < endMorning))
{
        welcomeText = "good moorning";
        
                    }else if ((now > endMorning) && (now < endAfternoon))
                    {
        welcomeText = "good afternoon";
    }else if ((now > endAfternoon) && (now < endEvning))
                    {
        welcomeText = "good evning";
    }


    string liveDataUrl = "";
    if (System.Environment.GetEnvironmentVariables().Contains("liveDataUrl"))
    {
        liveDataUrl = "https://localhost/getAllInfo/database1";
    }
                    else
                    {
                        liveDataUrl = "http://localhost:8080/getAllInfo/database1";
                    }
}

<head>

<meta http-equiv="Content-Security-Policy" content="upgrade-insecure-requests"> 
<style>
   

</style>
  <link href='https://fonts.googleapis.com/css?family=Asap:400,700' rel='stylesheet' type='text/css'>
<link href='https://fonts.googleapis.com/css?family=Signika' rel='stylesheet' type='text/css'>
<script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.2/gsap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.min.js"></script>
<link rel="stylesheet" href="~/css/startPage.css">


</head>
<body>
  <section class="firstSection">
 <div class="cover">


</div>
   <img class="headerleaf" src="~/lib/startPageImages/mrr.png" alt="">
<div class="userDiv">
  <text class="welcomeText">  
      @welcomeText
    </text>
   <p id="offlineMode"> Offline Mode</p>
   <p id="offlineText">The system is currently paused fro Maintenence.
       All changes you make in offline mode will be applied once the system is up again</p>
  <text class="userText">@User.Identity.Name</text>
  <a class="signOut" href="/signout-oidc">Sign-out</a>

</div>


<text class="title"> Dashboard</text>
<div class="status">
    
  <ul class="statusul">
<li class="tempLi"><img src="~/lib/startPageImages/temperature-2-512.png" style="width:40px;"> <text id="temp" style="top:-20px; position:relative"></text> </li>
<li class="windLi"><img src="~/lib/startPageImages/wind.png" style="width:40px;"alt=""> <text id="wind" style="top:-20px; position:relative"></text> </li>
<li class="cloudLi"><img src="~/lib/startPageImages/cloud.png" style="width:40px;"alt=""> <text id="cloud" style="top:-20px; position:relative"></text> </li>
 <div class="statusRay"></div>
  </ul>

</div>

<div class="menu-links">
  <ul>
       <li ><a class="menu-links-a" href="/rooms">Manage rooms</a></li>
      <li ><a class="menu-links-a" href="/devices">Manage devices</a></li>
    <li><a class="menu-links-a" href="/sensors">Manage sensors</a></li> 
  <li><a class="menu-links-a" href="/parameters">Manage Parameters</a></li>
  <li><a class="menu-links-a" href="/automations">Manage Automations</a></li>
  <li><a class="menu-links-a" href="/energySourceDevices">Show Energy Sources</a></li>

  </ul>

  
</div>



<div class="container devicesContainer">
<text class="containersTitleText">Devices</text>
<ul id="conUl" class="containersul">
                @foreach(var a in devices)
                {
                    <li class="deviceLi"><text class="containersText">@a.deviceName <text class="roomText">@a.room.roomTitle</text> </text>
</li>
                }

</ul>


</div>
<div class="container sensorsContainer">
  <text class="containersTitleText">Sensors</text>
  <ul class="containersul">
  @foreach(var a in sensors)
                {
                    <li><text class="containersText">@a.sensorName <text class="roomText">@a.room.roomTitle</text> </text> </li>
                }

  
  
  </ul>

</div>
<div class="container AutomationsContainer">
  <text class="containersTitleText">Automations</text>

  <ul class=" containersul">
 @foreach(var a in automations)
                {
                    <li><text class="containersText">@a.automationTitle </text> </li>
                }
</ul>
</div>
<div class="container greenSourcesContainer">
  <text class="containersTitleText">Rooms</text>
  <ul class="containersul">
 @foreach(var a in rooms)
                {
                    <li><text class="containersText">@a.roomTitle</text></li>
                }
  </ul>
  </div>
  <div class=" informationContainer">
    <text class="containersTitleText">System information</text>
    <text id="infotext">The avarage wind speed for the next seven days is 6 m/s 
      . Thats enough to grnerate 1500 watt per hour and aboout 30KW per day . There are @devices.Count() devices connected to the system with 
      total consumption of 6000 watt per hour.
      <br>
      The system can serve your connected devices with inability level of 10%
    </text >
    <div id="systemS">
      system status: <text style="color: rgb(20, 192, 89)">green</text>
    </div>
    <div class="informayionRay"></div>
    
  </div>
    
  
<div class="blade-container">
    <div class="blade green"></div>
    <div class="blade yellow"></div>
    <img class="imgSH" src="~/lib/startPageImages/goldHouse.png" alt="centered" >
  </div>

<div class="ray">
  <div class="upRay"></div>
   <div class="downRay"></div>
   <div class="rightRay"></div>
   <div class="leftRay"></div>
   <div class="sun"></div>
</div>

<div class="scrollDown">
  <text>Scroll Down</text>


</div>
<img class="scrollDownsymb"src="~/lib/startPageImages/output-onlinegiftools (1).gif" alt=""></img>
<marquee scrollamount="9" class="liveData" id="liveData">  </marquee>


</section>





<!-- Second Section -->





 <section class=" secondSection" >
     <div class=" devicesContainer2">
<text class="containersTitleText">Control Devices Manually</text>
<p style="color: #a3a2a2;font-size: 20px;">Controlling a device manuelly will disconnect it from all automation processes. To rejoin device in its automation processes, you can click on Stop Manual control</p>
<ul class="containersul">
                @foreach(var a in devices)
                {
                    <li class="deviceLi"><text class="containersText">@a.deviceName <text class="roomText">@a.room.roomTitle</text> </text>
                        <text onclick="startDeviceManually(@a.Id)" style="color:green;font-size: 23px;cursor: pointer;">Start</text> <text  onclick="stopDeviceManually(@a.Id)" style="color:red;font-size: 23px;cursor: pointer;"> Stop</text>
                        <text  onclick="stopManualControl(@a.Id)" style="color:wheat;cursor: pointer;font-size: 23px;"> Stop Manual Control</text></li>
                }

</ul>


</div>


   <div class="energysourcepowerlevel">
   <text style="place-self: center; position:relative"></text>
<ul class="doughnutUl">
  <li>
    <div class="doughnutChart batteryLevel" >
      <canvas id="myChart" ></canvas>
  
  </div> </li>
  <li> <div class="doughnutChart actualEnergy" >
    <canvas id="myChart2" ></canvas>

</div> </li>
<li> <div class="doughnutChart consuminByRoom" >
  <canvas id="myChart3" ></canvas>

</div> </li>
</ul>

   </div>


</section>


<script>



    function startDeviceManually(deviceId){

        $.ajax({

            url:`/devices/startDeviceManually/${deviceId}`,
            method:"Get",
            success: function(response){
               alert("Device Manually Started. Starting the device munually will disconnect it from all Automation procceses. Click on \"Stop Manual control\" to rejoin the device on its automation processes")
            },
            error: function(response){
           if(response.status==500){
    alert("Can not stop the device ")
}
            }


        })

    }


    function stopManualControl(deviceId){
         $.ajax({

            url:`/devices/stopManualControl/${deviceId}`,
            method:"Get",
            success: function(response){
                alert("Device joined on its automation processes")
            },
            error: function(response){
           if(response.status==500){
    alert("Error ")
}
            }
        })

    }

     function stopDeviceManually(deviceId){

        $.ajax({

            url:`/devices/stopDeviceManually/${deviceId}`,
            method:"Get",
            success: function(response){
               alert("Device Manually Stopped. Stopping the device munually will disconnect it from all Automation procceses. Click on \"Stop Manual control\" to rejoin the device on its automation processes")
            },
            error: function(response){
           if(response.status==500){
    alert("Can not stop the device ")
}
            }
        })

    }
    (function(){
       console.log("njknkjnjk"+document.getElementById("conUl").childNodes.length)
            if(document.getElementById("conUl").childNodes.length!=1){
                document.getElementById("systemS").style.display="block"
                document.getElementById("infotext").style.display="block"

            }

    })()
    gsap.to(".imgSH",{duration: 2,autoAlpha:1,delay:0.2})

    TweenMax.from(".yellow", 1, {
      delay: 0.4,
      opacity: 0,
      ease: Expo.easeInOut
    })
    TweenMax.from(".green", 2, {
      delay: 0.4,
      opacity: 0,
      ease: Expo.easeInOut
    })
    TweenMax.from(".upRay", 2, {
      delay: 0.5,
      opacity: 0,
      ease: Expo.easeInOut
    })
    TweenMax.from(".sun", 2, {
      delay: 0.7,
      opacity: -2,
      ease: Expo.easeInOut
    })
    TweenMax.from(".downRay", 2, {
      delay: 0.9,
      opacity: 0,
      ease: Expo.easeInOut
    })
    TweenMax.from(".rightRay", 2, {
      delay: 1.1,
      opacity: 0,
      ease: Expo.easeInOut
    })
     TweenMax.from(".leftRay", 2, {
      delay: 1.1,
      opacity: 0,
      ease: Expo.easeInOut
    })
   
    TweenMax.from(".informationContainer", 2, {
      delay: 1.1,
      opacity: 0,
      ease: Expo.easeInOut
    })
    TweenMax.from(".status", 2, {
      delay: 1.1,
      opacity: 0,
      ease: Expo.easeInOut
    })
    TweenMax.from([".userdiv",".userText",".signOut"], 4, {
      delay: 1.2,
      opacity: 0,
      x:100,
      blur:30,
      ease: Expo.easeInOut
    })
    TweenMax.from(".welcomeText", 2, {
      delay: 1.4,
      opacity: 0,
      x:100,
      ease: Expo.easeInOut
    })
  
   TweenMax.from(".container", 2, {
      delay: 0.5,
      opacity: 0,
      ease: Expo.easeInOut
    })
     TweenMax.from(".headerleaf", 2, {
      delay: 2,
      opacity: 0,
      ease: Expo.easeInOut
    })

 TweenMax.staggerFrom(".title", 0.5, {
      delay: 1.5,
      opacity: 0,
      x: -100,
      ease: Expo.easeInOut
    }, 2)

    TweenMax.staggerFrom(".status ul li", 0.1, {
      delay: 1.5,
      opacity: 0,
      blur:10,
      x: 100,
      ease: Expo.easeInOut
    }, 1)
    TweenMax.staggerFrom(".scrollDownsymb", 0.5, {
      delay: 2.5,
      opacity: 0,
      blur:10,
   
      ease: Expo.easeInOut
    }, 1)
    TweenMax.staggerFrom(".scrollDown", 0.5, {
      delay: 2.5,
      opacity: 0,
      blur:10,
    
      ease: Expo.easeInOut
    }, 1)
    
   
    

 TweenMax.staggerFrom(".menu-links ul li", 0.3, {
      delay: 0.1,
      opacity: 0,
      x: -100,
      ease: Expo.easeInOut
    }, 0.5)
    TweenMax.staggerFrom(".whetherNews", 1, {
      delay: 11.2,
      opacity: 0,
    
      ease: Expo.easeInOut
    }, 1.5)



    // second section script

    const opt={ legend: { labels: { fontColor: '#97b67f' ,fontSize:15} } }
const data = {labels: [ "Energy-source-battery-level(Watt)","Charge-level %"],
 datasets: [{label: 'battery-level', data: [0,30,70], backgroundColor: ['black','#45db00b3', ],borderColor:"#ffff0000" ,hoverBackgroundColor:['black','#49494954']}]}
const config = { type: 'doughnut', data: data,options: { legend: { labels: { fontColor: '#97b67f' ,fontSize:15} } }}
const data2 = {labels: [ "Actual-Energy-Production(Watt)","Wind-Turbine","Sollar-panel"],
 datasets: [{label: 'power-production', data: [0, 1500,600], backgroundColor: ['black','#09bbffa3', '#e3d008a3', ],borderColor:"#ffff0000",hoverBackgroundColor:['black','#49494954','#49494954']}]};
const config2 = { type: 'doughnut', data: data2,options:opt}
const data3 = {labels: [ "Energy-use-by-room(Watt/week)","Livingroom","Beedroom","Kitchen"],
 datasets: [{label: 'rooms-consuming', data: [0, 1500,600,300], backgroundColor: ['black','#f5f5f169', '#b67f91a3','#08e3bfa3' ],borderColor:"#ffff0000",hoverBackgroundColor:['black','#49494954','#49494954','#49494954']},]};
const config3 = { type: 'doughnut', data: data3,options:opt}


const ctx = document.getElementById('myChart');
const myChart = new Chart(ctx,config)
const ctx2 = document.getElementById('myChart2');
const myChart2 = new Chart(ctx2, config2);
const ctx3 = document.getElementById('myChart3');
const myChart3 = new Chart(ctx3, config3);


 gsap.to(".box", {duration: 2, rotation:360, y:200, stagger: 0.3});
  setTimeout(() => {
    gsap.to(".box", {duration: 2, rotation:-360, y:-200, stagger: 0.3});

TweenMax.to(".cover ",9, {
      opacity: -3,
      
      ease: Expo.easeInOut })

}, "3000")
     
const secondSectionObserver = new IntersectionObserver((section)=>{
section.forEach((div)=>{
if(div.isIntersecting){
  console.log(div.target.attributes)
  div.target.classList.add('show')
  TweenMax.staggerFrom(".doughnutUl li", 1, {
      delay: 0.5,
      opacity: 0,
      x: -150,
      ease: Expo.easeInOut
    }, 1)
    TweenMax.staggerFrom(".devicesContainer2", 1, {
      delay: 0.3,
      opacity: 0,
      x: -150,
      ease: Expo.easeInOut
    }, 1)
    
    

}else{
  div.target.classList.remove('show')
}

})

})

const secondSectionElements = document.querySelectorAll('.secondSection')
//secondSectionObserver.observe(secondSectionElements)
secondSectionElements.forEach((section)=>secondSectionObserver.observe(section))

var getSystemLiveData = setInterval(getLiveDataFromResourceServer, 1000);

function getLiveDataFromResourceServer(){

    $.ajax({

        url:'@liveDataUrl',
        methode:"get",
      
        beforeSend: function (xhr) {
    xhr.setRequestHeader('Authorization', `Bearer @token`);
    
    
},

        success: function(r,d,f){
             var liveDataMarque =document.getElementById("liveData")
           liveDataMarque.innerHTML="Live Data : "
            document.getElementById("temp").innerHTML=""
            document.getElementById("cloud").innerHTML=""
            document.getElementById("wind").innerHTML=""
            //var jsonArray = JsonConvert.DeserializeObject<JArray>(r);
            var data= JSON.parse(r)
            console.log(data)
            var devices =data[0]["devices"]
            var sensors= data[1]["sensors"]
            for(var a=0;a<devices.length;a++){
               
                var deviceStatus= document.createElement("text")
                deviceStatus.style.color="Green"
                deviceStatus.append(devices[a]["status"]+" ")
                liveDataMarque.append(devices[a]["deviceName"]
               +" " +"status :"+" ")
               liveDataMarque.append(deviceStatus);
            }
            for(var s=0;s<sensors.length;s++){

                 liveDataMarque.append(" "+sensors[s]["sensorName"]+" "+"liveValue :"+" "+ sensors[s]["liveValue"]+" ");

            }
            document.getElementById("temp").append(data[2]["whether"][0]+"°")
            document.getElementById("cloud").append(data[2]["whether"][1]+"%")
            document.getElementById("wind").append(data[2]["whether"][2]+"m/s")
           // document.getElementById("temp").append(data[2]["wheather"][0])


        },
error:function(e,f,g){
    if (e.status==401 ||f=="error"){
        var answer = window.confirm("Access system live information is denied. Do you want to try again?");
if (answer) {
  
window.location.href="./";
}
else {
    console.log("Access token is invaild")
   clearInterval(getSystemLiveData);
    document.getElementById("offlineMode").style.display= "initial"
     document.getElementById("offlineText").style.display= "initial"
    console.log(getSystemLiveData)

}


    }
    
    console.log(e.location)
    console.log(f)
    console.log(g)
},

        

   })



}






</script>


</body>